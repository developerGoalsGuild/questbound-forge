# Frontend Development Rules - GoalsGuild QuestBound Forge

## React Component Development

### 1. Component Structure
```typescript
// ✅ REQUIRED: Standard component structure
import React, { useState, useEffect, useCallback } from 'react';
import { useTranslation } from '@/hooks/useTranslation';
import { useUserProfile } from '@/hooks/useUserProfile';

interface ComponentProps {
  // Define all props with proper types
  userId?: string;
  onUpdate?: (data: any) => void;
}

const ComponentName: React.FC<ComponentProps> = ({ userId, onUpdate }) => {
  const { t } = useTranslation();
  const { profile, loading, error, refetch } = useUserProfile();
  
  // Component logic here
  
  return (
    <div>
      {/* JSX content */}
    </div>
  );
};

export default ComponentName;
```

### 2. Safe Property Access
```typescript
// ✅ REQUIRED: Always use safe property access
const roleDisplay = profile?.role?.charAt(0)?.toUpperCase() + profile?.role?.slice(1) || 'User';
const email = profile?.email || 'No email';
const tags = profile?.tags || [];

// ❌ AVOID: Unsafe property access
const roleDisplay = profile.role.charAt(0).toUpperCase() + profile.role.slice(1);
```

### 3. Error Handling
```typescript
// ✅ REQUIRED: Comprehensive error handling
const handleError = useCallback((error: any) => {
  console.error('Component error:', error);
  
  if (error?.message === 'PROFILE_NOT_FOUND') {
    // Handle specific error
    return 'No profile found. Please sign up first.';
  }
  
  if (error?.errors && Array.isArray(error.errors)) {
    const firstError = error.errors[0];
    return firstError?.message || 'An error occurred';
  }
  
  return error?.message || 'An unexpected error occurred';
}, []);

// ✅ REQUIRED: Error boundaries
if (error) {
  return (
    <Alert>
      <AlertDescription>
        {handleError(error)}
      </AlertDescription>
    </Alert>
  );
}
```

### 4. Loading States
```typescript
// ✅ REQUIRED: Always handle loading states
if (loading) {
  return (
    <div className="flex items-center justify-center p-8">
      <Skeleton className="h-8 w-32" />
      <Skeleton className="h-4 w-48 ml-4" />
    </div>
  );
}
```

## GraphQL Integration

### 1. Query Structure
```typescript
// ✅ REQUIRED: Complete GraphQL queries
export const MY_PROFILE = /* GraphQL */ `
  query MyProfile {
    myProfile {
      id
      email
      role
      fullName
      nickname
      birthDate
      status
      country
      language
      gender
      pronouns
      bio
      tags
      tier
      createdAt
      updatedAt
    }
  }
`;
```

### 2. API Client Configuration
```typescript
// ✅ REQUIRED: Environment-based configuration
export async function graphqlRaw<T = any>(query: string, variables: any = {}) {
  const endpoint = import.meta.env.VITE_APPSYNC_ENDPOINT || 'fallback-url';
  
  const token = JSON.parse(localStorage.getItem('auth') || '{}')?.access_token;
  if (!token) throw new Error('NO_TOKEN');

  console.info('[graphqlRaw] Using endpoint:', endpoint);

  const res = await fetch(endpoint, {
    method: 'POST',
    headers: { 
      'content-type': 'application/json', 
      Authorization: `Bearer ${token}` 
    },
    body: JSON.stringify({ query, variables }),
  });

  const json = await res.json();
  
  if (!res.ok || json.errors?.length) {
    console.error('[graphqlRaw] Error response:', json);
    throw Object.assign(new Error('GraphQL error'), { 
      response: res, 
      errors: json.errors, 
      data: json.data 
    });
  }
  
  return json.data as T;
}
```

### 3. Type Safety
```typescript
// ✅ REQUIRED: Strong typing for API responses
export interface UserProfile {
  id: string;
  email: string;
  role: 'user' | 'partner' | 'patron';
  fullName?: string;
  nickname?: string;
  birthDate?: string;
  status: string;
  country?: string;
  language: string;
  gender?: string;
  pronouns?: string;
  bio?: string;
  tags: string[];
  tier: string;
  createdAt: number | null;
  updatedAt: number | null;
}

// ✅ REQUIRED: Type-safe API functions
export async function getProfile(): Promise<UserProfile> {
  try {
    const data = await graphqlRaw<{ myProfile: UserProfile }>(MY_PROFILE);
    return data?.myProfile as UserProfile;
  } catch (e: any) {
    console.error('[getProfile] Error:', e);
    
    if (e?.errors && Array.isArray(e.errors)) {
      const error = e.errors[0];
      if (error?.errorType === 'NotFound' && error?.message === 'Profile not found') {
        throw new Error('PROFILE_NOT_FOUND');
      }
      throw new Error(error?.message || 'GraphQL error');
    }
    
    throw new Error(e?.message || 'Failed to fetch profile');
  }
}
```

## State Management

### 1. Custom Hooks
```typescript
// ✅ REQUIRED: Custom hooks for data fetching
export const useUserProfile = (): UseUserProfileReturn => {
  const [profile, setProfile] = useState<UserProfile | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  const fetchProfile = useCallback(async () => {
    try {
      setLoading(true);
      setError(null);
      const profileData = await getProfile();
      setProfile(profileData);
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'Failed to fetch profile';
      setError(errorMessage);
      console.error('Profile fetch error:', err);
      
      // Don't set profile to null for specific errors
      if (errorMessage !== 'PROFILE_NOT_FOUND') {
        setProfile(null);
      }
    } finally {
      setLoading(false);
    }
  }, []);

  useEffect(() => {
    fetchProfile();
  }, [fetchProfile]);

  return { profile, loading, error, refetch: fetchProfile };
};
```

### 2. Error State Management
```typescript
// ✅ REQUIRED: Proper error state handling
const handleError = (error: string | null) => {
  if (!error) return null;
  
  if (error === 'PROFILE_NOT_FOUND') {
    return (
      <Alert>
        <AlertDescription>
          {t.profile.messages.profileNotFound}
        </AlertDescription>
        <Button onClick={() => navigate('/signup')}>
          {t.profile.actions.goToSignUp}
        </Button>
      </Alert>
    );
  }
  
  return (
    <Alert>
      <AlertDescription>{error}</AlertDescription>
    </Alert>
  );
};
```

## Internationalization

### 1. Translation Structure
```typescript
// ✅ REQUIRED: Complete translation interfaces
export interface ProfileTranslations {
  title: string;
  subtitle: string;
  fields: {
    fullName: string;
    email: string;
    role: string;
    // ... other fields
  };
  actions: {
    save: string;
    cancel: string;
    reset: string;
    goToSignUp: string;
  };
  messages: {
    saveSuccess: string;
    saveError: string;
    loading: string;
    profileNotFound: string;
  };
}

// ✅ REQUIRED: All languages must have complete translations
export const profileTranslations: Record<Language, ProfileTranslations> = {
  en: { /* English translations */ },
  es: { /* Spanish translations */ },
  fr: { /* French translations */ }
};
```

## Testing

### 1. Component Tests
```typescript
// ✅ REQUIRED: Test component behavior
import { render, screen, waitFor } from '@testing-library/react';
import { ProfileView } from './ProfileView';

describe('ProfileView', () => {
  it('should display profile data when loaded', async () => {
    render(<ProfileView />);
    
    await waitFor(() => {
      expect(screen.getByText('BENJAMIN ALVAREZ')).toBeInTheDocument();
    });
  });
  
  it('should handle loading state', () => {
    render(<ProfileView />);
    expect(screen.getByText('Loading...')).toBeInTheDocument();
  });
  
  it('should handle error state', async () => {
    // Mock error state
    render(<ProfileView />);
    
    await waitFor(() => {
      expect(screen.getByText('Profile not found')).toBeInTheDocument();
    });
  });
});
```

### 2. API Tests
```typescript
// ✅ REQUIRED: Test API functions
import { getProfile } from './apiProfile';

describe('getProfile', () => {
  it('should return profile data on success', async () => {
    const mockData = { myProfile: { id: '1', email: 'test@example.com' } };
    // Mock fetch response
    const result = await getProfile();
    expect(result).toEqual(mockData.myProfile);
  });
  
  it('should handle PROFILE_NOT_FOUND error', async () => {
    // Mock error response
    await expect(getProfile()).rejects.toThrow('PROFILE_NOT_FOUND');
  });
});
```

## Performance

### 1. Optimization
```typescript
// ✅ REQUIRED: Memoize expensive operations
const memoizedValue = useMemo(() => {
  return expensiveCalculation(profile);
}, [profile]);

// ✅ REQUIRED: Debounce user input
const debouncedSearch = useDebounce(searchTerm, 300);

// ✅ REQUIRED: Lazy load components
const LazyComponent = lazy(() => import('./LazyComponent'));
```

### 2. Bundle Optimization
```typescript
// ✅ REQUIRED: Code splitting
const ProfilePage = lazy(() => import('./pages/profile/ProfilePage'));

// ✅ REQUIRED: Tree shaking
import { Button } from '@/components/ui/button';
// Not: import * as UI from '@/components/ui';
```

## Common Anti-Patterns to Avoid

### ❌ DON'T
- Access properties without null checks
- Ignore loading states
- Skip error handling
- Use hardcoded strings
- Deploy without testing
- Assume data structure

### ✅ DO
- Always use safe property access
- Handle all loading states
- Implement comprehensive error handling
- Use internationalization
- Test thoroughly
- Validate data structure
