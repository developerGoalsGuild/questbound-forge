# ---------------------------------------
# schema.graphql  (AppSync-compatible)
# ---------------------------------------

# AWS Scalars
scalar AWSDateTime
scalar AWSDate
scalar AWSTimestamp
scalar AWSJSON

# Enums
enum GoalStatus {
  active
  paused
  completed
  archived
}

enum TaskStatus {
  open
  in_progress
  done
  canceled
}

enum QuestStatus {
  draft
  active
  completed
  cancelled
  failed
}

enum QuestDifficulty {
  easy
  medium
  hard
}

enum QuestKind {
  linked
  quantitative
}

enum QuestCountScope {
  any
  linked
}

enum QuestPrivacy {
  public
  followers
  private
}

# ----------------
# Core Types
# ----------------

type User {
  id: ID! @aws_api_key
  email: String @aws_api_key
  fullName: String
  nickname: String
  birthDate: AWSDate
  status: String @aws_api_key
  country: String
  language: String
  gender: String
  pronouns: String
  bio: String
  tags: [String!]!
  tier: String!                 # "free" | "premium" etc.
  createdAt: AWSTimestamp
  updatedAt: AWSTimestamp
  ageYears: Int
}

# Typed answer pair for goals
type Answer {
  key: String!
  answer: String!
}

input AnswerInput {
  key: String!
  answer: String!
}

type Goal {
  id: ID!
  userId: ID!
  title: String!
  description: String
  category: String
  tags: [String!]
  deadline: AWSDate
  status: GoalStatus!
  createdAt: AWSTimestamp
  updatedAt: AWSTimestamp
  answers: [Answer!]
}

type Task {
  id: ID!
  goalId: ID!
  ownerId: ID!
  title: String!
  nlpPlan: AWSJSON
  dueAt: AWSTimestamp
  status: TaskStatus!
  assignees: [ID!]
  createdAt: AWSTimestamp
  updatedAt: AWSTimestamp
}

type Quest {
  id: ID!
  userId: ID!
  title: String!
  description: String
  difficulty: QuestDifficulty!
  rewardXp: Int!
  status: QuestStatus!
  category: String!
  tags: [String!]!
  privacy: QuestPrivacy!
  deadline: AWSTimestamp
  createdAt: AWSTimestamp!
  updatedAt: AWSTimestamp!
  kind: QuestKind!
  linkedGoalIds: [ID!]
  linkedTaskIds: [ID!]
  dependsOnQuestIds: [ID!]
  targetCount: Int
  countScope: QuestCountScope
  startAt: AWSTimestamp
  periodSeconds: Int
}

type Message {
  id: ID!
  roomId: ID!
  senderId: ID!
  text: String!
  ts: AWSTimestamp!
}

type Offer {
  id: ID!
  title: String!
  url: String!
  tags: [String!]
  validTo: AWSDateTime
}

# ----------------
# Queries
# ----------------

type Query {
  me: User
  user(userId: ID!): User
  goals(userId: ID!): [Goal!]!
  activeGoalsCount(userId: ID!): Int!
  myGoals: [Goal!]!
  myDashboardGoals(limit: Int, status: String, sortBy: String): [Goal!]!
  myTasks(goalId: ID!): [Task!]!
  tasks(goalId: ID!): [Task!]!
  myQuests(goalId: ID): [Quest!]!
  messages(roomId: ID!, after: AWSTimestamp, limit: Int = 50): [Message!]!
  offers(tags: [String!], limit: Int = 20): [Offer!]!
  isEmailAvailable(email: String!): Boolean! @aws_api_key
  isNicknameAvailable(nickname: String!): Boolean! @aws_api_key
}

# ----------------
# Mutations
# ----------------

type Mutation {
  """
  Create a user profile. Accepts a bcrypt password hash (NEVER plaintext).
  The resolver sets tier to 'free' by default.
  """
  createUser(input: CreateUserInput!): User! @aws_api_key

  """
  Create a goal for the current user (from JWT).
  """
  createGoal(input: GoalInput!): Goal!

  """
  Add a task under a goal owned by the current user.
  """
  addTask(input: TaskInput!): Task!

  """
  Post a message to a chat room.
  """
  sendMessage(roomId: ID!, text: String!): Message!
}

# ----------------
# Subscriptions
# ----------------

type Subscription {
  """
  Subscribe to new messages for a room. Requires the same roomId as in sendMessage.
  """
  onMessage(roomId: ID!): Message!
    @aws_subscribe(mutations: ["sendMessage"])
}

# ----------------
# Inputs
# ----------------

input CreateUserInput {
  email: String!
  fullName: String!
  nickname: String!
  birthDate: AWSDate
  status: String
  country: String!
  language: String = "en"
  gender: String
  pronouns: String
  bio: String
  tags: [String!]
  passwordHash: String       # bcrypt hash; hashing is done outside this API
  password: String           # DEV ONLY: plaintext accepted for non-production
}

input GoalInput {
  title: String!
  description: String
  category: String
  tags: [String!]
  deadline: AWSDate!    # required to match resolver validation
  answers: [AnswerInput!]
}

input TaskInput {
  goalId: ID!
  title: String!
  # If you store epoch milliseconds internally, convert to seconds or adjust resolver to return seconds.
  dueAt: AWSTimestamp
  nlpPlan: AWSJSON
  assignees: [ID!]
}

# ----------------
# Root Schema
# ----------------

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}
