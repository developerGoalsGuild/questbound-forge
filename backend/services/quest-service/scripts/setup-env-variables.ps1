# Quest Service Environment Variables Setup Script
# This script sets up permanent environment variables for local development

Write-Host "Setting up Quest Service Environment Variables..." -ForegroundColor Green

# Function to set permanent environment variable
function Set-PermanentEnvVar {
    param(
        [string]$Name,
        [string]$Value,
        [string]$Scope = "User"
    )
    
    try {
        [Environment]::SetEnvironmentVariable($Name, $Value, $Scope)
        Write-Host "Set $Name = $Value" -ForegroundColor Green
    }
    catch {
        Write-Host "Failed to set $Name : $($_.Exception.Message)" -ForegroundColor Red
    }
}

# Function to set temporary environment variable for current session
function Set-TempEnvVar {
    param(
        [string]$Name,
        [string]$Value
    )
    
    try {
        [Environment]::SetEnvironmentVariable($Name, $Value, "Process")
        Write-Host "Set $Name = $Value (current session)" -ForegroundColor Yellow
    }
    catch {
        Write-Host "Failed to set $Name : $($_.Exception.Message)" -ForegroundColor Red
    }
}

Write-Host "`nSetting up AWS Configuration..." -ForegroundColor Cyan

# AWS Configuration (credentials will be set via AWS credentials file)
Set-PermanentEnvVar "AWS_DEFAULT_REGION" "us-east-2"
Set-PermanentEnvVar "AWS_REGION" "us-east-2"

Write-Host "`nSetting up Quest Service Configuration..." -ForegroundColor Cyan

# Quest Service Core Configuration
Set-PermanentEnvVar "CORE_TABLE" "gg_core_temp"
# QUEST_SERVICE_ENV_VARS - Set manually in environment

Write-Host "`nSetting up Authentication Configuration..." -ForegroundColor Cyan

# JWT/Authentication Configuration
Set-PermanentEnvVar "JWT_AUDIENCE" "api://test"
Set-PermanentEnvVar "JWT_ISSUER" "https://auth.test"
Set-PermanentEnvVar "COGNITO_REGION" "us-east-2"
Set-PermanentEnvVar "COGNITO_USER_POOL_ID" "test-pool"
Set-PermanentEnvVar "COGNITO_CLIENT_ID" "test-client"
Set-PermanentEnvVar "ALLOWED_ORIGINS" "http://localhost:8080"
#Set-PermanentEnvVar "QUEST_SERVICE_JWT_SECRET" "test-secret-key-for-development-only"

Write-Host "`nSetting up Development Configuration..." -ForegroundColor Cyan

# Development/Testing Configuration
Set-PermanentEnvVar "QUEST_SERVICE_ROOT_PATH" "/DEV"
Set-PermanentEnvVar "QUEST_LOG_ENABLED" "true"
Set-PermanentEnvVar "SETTINGS_SSM_PREFIX" "/goalsguild/quest-service/"

# DynamoDB Local Configuration (if using local DynamoDB)
#Set-PermanentEnvVar "AWS_ENDPOINT_URL" "http://localhost:8000"

Write-Host "`nSetting up Test Configuration..." -ForegroundColor Cyan

# Test-specific configuration
Set-PermanentEnvVar "TEST_CORE_TABLE" "gg_core_temp"
Set-PermanentEnvVar "TEST_AWS_REGION" "us-east-2"
Set-PermanentEnvVar "TEST_USER_ID" "test-user-123"
Set-PermanentEnvVar "TEST_QUEST_PREFIX" "test_quest_"
Set-PermanentEnvVar "TEST_GOAL_PREFIX" "test_goal_"
Set-PermanentEnvVar "TEST_TASK_PREFIX" "test_task_"

# Authentication Configuration for Tests (set manually)
# GOALSGUILD_USER - Test user email/username for login
# GOALSGUILD_PASSWORD - Test user password for login  
# VITE_API_GATEWAY_URL - API Gateway URL for testing
# VITE_API_GATEWAY_KEY - API Gateway key for testing

Write-Host "`nSetting up Temporary Session Variables..." -ForegroundColor Cyan

# Set temporary variables for current session
Set-TempEnvVar "AWS_DEFAULT_REGION" "us-east-2"
Set-TempEnvVar "AWS_REGION" "us-east-2"
Set-TempEnvVar "CORE_TABLE" "gg_core_temp"
# QUEST_SERVICE_ENV_VARS - Set manually in environment
# Authentication variables are set manually in environment
# GOALSGUILD_USER, GOALSGUILD_PASSWORD, VITE_API_GATEWAY_URL, VITE_API_GATEWAY_KEY

Write-Host "`nCreating .env file for local development..." -ForegroundColor Cyan

# Create .env file for the quest service
$envContent = @"
# Quest Service Environment Variables
# Generated by setup-env-variables.ps1

# AWS Configuration (credentials will be set via AWS credentials file)
AWS_DEFAULT_REGION=us-east-2
AWS_REGION=us-east-2

# DynamoDB Configuration
CORE_TABLE=gg_core_temp
AWS_ENDPOINT_URL=http://localhost:8000

# Quest Service Configuration (set manually in environment)
# QUEST_SERVICE_ENV_VARS={"CORE_TABLE":"gg_core_temp","AWS_REGION":"us-east-2","JWT_AUDIENCE":"api://test","JWT_ISSUER":"https://auth.test","COGNITO_REGION":"us-east-2","COGNITO_USER_POOL_ID":"test-pool","COGNITO_CLIENT_ID":"test-client","ALLOWED_ORIGINS":"http://localhost:3000","QUEST_SERVICE_JWT_SECRET":"test-secret-key-for-development-only"}

# Authentication Configuration
JWT_AUDIENCE=api://test
JWT_ISSUER=https://auth.test
COGNITO_REGION=us-east-2
COGNITO_USER_POOL_ID=test-pool
COGNITO_CLIENT_ID=test-client
ALLOWED_ORIGINS=http://localhost:3000
QUEST_SERVICE_JWT_SECRET=test-secret-key-for-development-only

# Development Configuration
QUEST_SERVICE_ROOT_PATH=/DEV
QUEST_LOG_ENABLED=true
SETTINGS_SSM_PREFIX=/goalsguild/quest-service/

# Test Configuration
TEST_CORE_TABLE=gg_core_temp
TEST_AWS_REGION=us-east-2
TEST_USER_ID=test-user-123
TEST_QUEST_PREFIX=test_quest_
TEST_GOAL_PREFIX=test_goal_
TEST_TASK_PREFIX=test_task_

# Authentication Configuration for Tests (set manually in environment)
# GOALSGUILD_USER=your-test-user@example.com
# GOALSGUILD_PASSWORD=your-test-password
# VITE_API_GATEWAY_URL=https://your-api-gateway-url.execute-api.us-east-2.amazonaws.com/dev
# VITE_API_GATEWAY_KEY=your-api-gateway-key
"@

$envFilePath = Join-Path $PSScriptRoot "..\.env"
$envContent | Out-File -FilePath $envFilePath -Encoding UTF8
Write-Host "Created .env file at: $envFilePath" -ForegroundColor Green

Write-Host "`nCreating test environment file..." -ForegroundColor Cyan

# Create test environment file
$testEnvContent = @"
# Test Environment Variables for Quest Service
# Generated by setup-env-variables.ps1

# Test AWS Configuration (credentials will be set via AWS credentials file)
AWS_DEFAULT_REGION=us-east-2
AWS_REGION=us-east-2

# Test DynamoDB Configuration
CORE_TABLE=gg_core_temp
AWS_ENDPOINT_URL=http://localhost:8000

# Test Quest Service Configuration (set manually in environment)
# QUEST_SERVICE_ENV_VARS={"CORE_TABLE":"gg_core_temp","AWS_REGION":"us-east-2","JWT_AUDIENCE":"api://test","JWT_ISSUER":"https://auth.test","COGNITO_REGION":"us-east-2","COGNITO_USER_POOL_ID":"test-pool","COGNITO_CLIENT_ID":"test-client","ALLOWED_ORIGINS":"http://localhost:3000","QUEST_SERVICE_JWT_SECRET":"test-secret-key-for-development-only"}

# Test Authentication Configuration
JWT_AUDIENCE=api://test
JWT_ISSUER=https://auth.test
COGNITO_REGION=us-east-2
COGNITO_USER_POOL_ID=test-pool
COGNITO_CLIENT_ID=test-client
ALLOWED_ORIGINS=http://localhost:3000
QUEST_SERVICE_JWT_SECRET=test-secret-key-for-development-only

# Test Development Configuration
QUEST_SERVICE_ROOT_PATH=/TEST
QUEST_LOG_ENABLED=true
SETTINGS_SSM_PREFIX=/goalsguild/quest-service/

# Test-specific Configuration
TEST_CORE_TABLE=gg_core_temp
TEST_AWS_REGION=us-east-2
TEST_USER_ID=test-user-123
TEST_QUEST_PREFIX=test_quest_
TEST_GOAL_PREFIX=test_goal_
TEST_TASK_PREFIX=test_task_

# Authentication Configuration for Tests (set manually in environment)
# GOALSGUILD_USER=your-test-user@example.com
# GOALSGUILD_PASSWORD=your-test-password
# VITE_API_GATEWAY_URL=https://your-api-gateway-url.execute-api.us-east-2.amazonaws.com/dev
# VITE_API_GATEWAY_KEY=your-api-gateway-key
"@

$testEnvFilePath = Join-Path $PSScriptRoot "..\tests\.env"
$testEnvContent | Out-File -FilePath $testEnvFilePath -Encoding UTF8
Write-Host "Created test .env file at: $testEnvFilePath" -ForegroundColor Green

Write-Host "`nVerifying environment variables..." -ForegroundColor Cyan

# Verify some key environment variables
$keyVars = @(
    "AWS_DEFAULT_REGION", 
    "CORE_TABLE"
)

foreach ($var in $keyVars) {
    $value = [Environment]::GetEnvironmentVariable($var, "User")
    if ($value) {
        Write-Host "Set $var = $value" -ForegroundColor Green
    } else {
        Write-Host "Not set $var" -ForegroundColor Red
    }
}

Write-Host "`nEnvironment setup complete!" -ForegroundColor Green
Write-Host "`nNext steps:" -ForegroundColor Yellow
Write-Host "1. Restart your terminal/PowerShell session" -ForegroundColor White
Write-Host "2. Run: cd backend/services/quest-service" -ForegroundColor White
Write-Host "3. Run: python -m uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload" -ForegroundColor White
Write-Host "4. Test with: python tests/quest/run_tests.py" -ForegroundColor White

Write-Host "`nImportant Notes:" -ForegroundColor Red
Write-Host "- AWS credentials should be set via AWS credentials file (~/.aws/credentials)" -ForegroundColor Yellow
Write-Host "- Use 'aws configure' to set up your AWS credentials" -ForegroundColor Yellow
Write-Host "- For local testing, consider using DynamoDB Local" -ForegroundColor Yellow

Write-Host "`nTo use DynamoDB Local:" -ForegroundColor Cyan
Write-Host "1. Install: npm install -g dynamodb-local" -ForegroundColor White
Write-Host "2. Start: dynamodb-local" -ForegroundColor White
Write-Host "3. The AWS_ENDPOINT_URL is already configured for localhost:8000" -ForegroundColor White

Write-Host "`nSetup complete! Happy coding!" -ForegroundColor Green
