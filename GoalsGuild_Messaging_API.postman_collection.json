{
	"info": {
		"_postman_id": "goalsguild-messaging-api",
		"name": "GoalsGuild Messaging API",
		"description": "Complete API collection for GoalsGuild messaging service with authentication flow",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "goalsguild-api"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "User Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200 || pm.response.code === 201) {",
									"    const response = pm.response.json();",
									"    if (response.access_token) {",
									"        pm.collectionVariables.set('access_token', response.access_token);",
									"        pm.collectionVariables.set('user_id', response.user_id || response.sub);",
									"        console.log('✅ User signed up successfully');",
									"        console.log('Access token saved:', response.access_token.substring(0, 20) + '...');",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-api-key",
								"value": "{{api_gateway_key}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{test_email}}\",\n    \"password\": \"{{test_password}}\",\n    \"username\": \"{{test_username}}\",\n    \"first_name\": \"Test\",\n    \"last_name\": \"User\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/users/signup",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"signup"
							]
						},
						"description": "Register a new user account"
					},
					"response": []
				},
				{
					"name": "User Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    if (response.access_token) {",
									"        pm.collectionVariables.set('access_token', response.access_token);",
									"        pm.collectionVariables.set('user_id', response.user_id || response.sub);",
									"        console.log('✅ User logged in successfully');",
									"        console.log('Access token saved:', response.access_token.substring(0, 20) + '...');",
									"    }",
									"} else {",
									"    console.log('❌ Login failed:', pm.response.text());",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-api-key",
								"value": "{{api_gateway_key}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{test_email}}\",\n    \"password\": \"{{test_password}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/users/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"login"
							]
						},
						"description": "Login with email and password to get access token"
					},
					"response": []
				},
				{
					"name": "Token Renewal",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    if (response.access_token) {",
									"        pm.collectionVariables.set('access_token', response.access_token);",
									"        console.log('✅ Token renewed successfully');",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "x-api-key",
								"value": "{{api_gateway_key}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{base_url}}/auth/renew",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"renew"
							]
						},
						"description": "Renew the access token"
					},
					"response": []
				}
			],
			"description": "Authentication endpoints for user management"
		},
		{
			"name": "Messaging - Rooms",
			"item": [
				{
					"name": "List Rooms",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    console.log('✅ Rooms retrieved:', response.length || 'No rooms');",
									"    if (response.length > 0) {",
									"        pm.collectionVariables.set('sample_room_id', response[0].id);",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "x-api-key",
								"value": "{{api_gateway_key}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/messaging/rooms",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"messaging",
								"rooms"
							]
						},
						"description": "Get list of all available chat rooms"
					},
					"response": []
				},
				{
					"name": "Create Room",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200 || pm.response.code === 201) {",
									"    const response = pm.response.json();",
									"    if (response.id) {",
									"        pm.collectionVariables.set('created_room_id', response.id);",
									"        console.log('✅ Room created:', response.id);",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "x-api-key",
								"value": "{{api_gateway_key}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Test Room {{$timestamp}}\",\n    \"description\": \"A test room created via API\",\n    \"type\": \"general\",\n    \"is_private\": false\n}"
						},
						"url": {
							"raw": "{{base_url}}/messaging/rooms",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"messaging",
								"rooms"
							]
						},
						"description": "Create a new chat room"
					},
					"response": []
				},
				{
					"name": "Get Room Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    console.log('✅ Room details retrieved:', response.name);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "x-api-key",
								"value": "{{api_gateway_key}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/messaging/rooms/{{sample_room_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"messaging",
								"rooms",
								"{{sample_room_id}}"
							]
						},
						"description": "Get details of a specific room"
					},
					"response": []
				},
				{
					"name": "Update Room",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "x-api-key",
								"value": "{{api_gateway_key}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Updated Room Name\",\n    \"description\": \"Updated description\",\n    \"is_private\": false\n}"
						},
						"url": {
							"raw": "{{base_url}}/messaging/rooms/{{sample_room_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"messaging",
								"rooms",
								"{{sample_room_id}}"
							]
						},
						"description": "Update room details"
					},
					"response": []
				},
				{
					"name": "Join Room",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    console.log('✅ Successfully joined room');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "x-api-key",
								"value": "{{api_gateway_key}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{base_url}}/messaging/rooms/{{sample_room_id}}/join",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"messaging",
								"rooms",
								"{{sample_room_id}}",
								"join"
							]
						},
						"description": "Join a chat room"
					},
					"response": []
				},
				{
					"name": "Leave Room",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    console.log('✅ Successfully left room');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "x-api-key",
								"value": "{{api_gateway_key}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{base_url}}/messaging/rooms/{{sample_room_id}}/leave",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"messaging",
								"rooms",
								"{{sample_room_id}}",
								"leave"
							]
						},
						"description": "Leave a chat room"
					},
					"response": []
				},
				{
					"name": "Delete Room",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "x-api-key",
								"value": "{{api_gateway_key}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/messaging/rooms/{{created_room_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"messaging",
								"rooms",
								"{{created_room_id}}"
							]
						},
						"description": "Delete a chat room"
					},
					"response": []
				}
			],
			"description": "Room management endpoints"
		},
		{
			"name": "Messaging - Messages",
			"item": [
				{
					"name": "Get Messages",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    console.log('✅ Messages retrieved:', response.length || 'No messages');",
									"    if (response.length > 0) {",
									"        pm.collectionVariables.set('sample_message_id', response[0].id);",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "x-api-key",
								"value": "{{api_gateway_key}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/messaging/rooms/{{sample_room_id}}/messages?limit=20&after={{$timestamp}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"messaging",
								"rooms",
								"{{sample_room_id}}",
								"messages"
							],
							"query": [
								{
									"key": "limit",
									"value": "20"
								},
								{
									"key": "after",
									"value": "{{$timestamp}}"
								}
							]
						},
						"description": "Get messages from a specific room with pagination"
					},
					"response": []
				},
				{
					"name": "Send Message",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200 || pm.response.code === 201) {",
									"    const response = pm.response.json();",
									"    if (response.id) {",
									"        pm.collectionVariables.set('sent_message_id', response.id);",
									"        console.log('✅ Message sent successfully:', response.id);",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "x-api-key",
								"value": "{{api_gateway_key}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"text\": \"Hello from Postman! This is a test message sent at {{$timestamp}}\",\n    \"type\": \"text\",\n    \"metadata\": {\n        \"client\": \"postman\",\n        \"timestamp\": \"{{$timestamp}}\"\n    }\n}"
						},
						"url": {
							"raw": "{{base_url}}/messaging/rooms/{{sample_room_id}}/messages",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"messaging",
								"rooms",
								"{{sample_room_id}}",
								"messages"
							]
						},
						"description": "Send a message to a specific room"
					},
					"response": []
				},
				{
					"name": "Send Multiple Messages",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate multiple test messages",
									"const messages = [",
									"    'Hello everyone! 👋',",
									"    'How is everyone doing today?',",
									"    'This is message #3 from Postman',",
									"    'Testing the messaging system 🚀',",
									"    'Final test message - {{$timestamp}}'",
									"];",
									"",
									"const randomMessage = messages[Math.floor(Math.random() * messages.length)];",
									"pm.collectionVariables.set('random_message', randomMessage);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200 || pm.response.code === 201) {",
									"    console.log('✅ Random message sent:', pm.collectionVariables.get('random_message'));",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "x-api-key",
								"value": "{{api_gateway_key}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"text\": \"{{random_message}}\",\n    \"type\": \"text\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/messaging/rooms/{{sample_room_id}}/messages",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"messaging",
								"rooms",
								"{{sample_room_id}}",
								"messages"
							]
						},
						"description": "Send a random test message"
					},
					"response": []
				}
			],
			"description": "Message management endpoints"
		},
		{
			"name": "WebSocket Testing",
			"item": [
				{
					"name": "WebSocket Connect",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "x-api-key",
								"value": "{{api_gateway_key}}"
							},
							{
								"key": "Upgrade",
								"value": "websocket"
							},
							{
								"key": "Connection",
								"value": "Upgrade"
							},
							{
								"key": "Sec-WebSocket-Key",
								"value": "{{$randomAlphaNumeric}}"
							},
							{
								"key": "Sec-WebSocket-Version",
								"value": "13"
							}
						],
						"url": {
							"raw": "{{base_url}}/ws",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"ws"
							]
						},
						"description": "Connect to WebSocket for real-time messaging"
					},
					"response": []
				}
			],
			"description": "WebSocket endpoints for real-time communication"
		},
		{
			"name": "AppSync GraphQL",
			"item": [
				{
					"name": "Get Messages (GraphQL)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    if (response.data && response.data.messages) {",
									"        console.log('✅ GraphQL Messages retrieved:', response.data.messages.length);",
									"        if (response.data.messages.length > 0) {",
									"            pm.collectionVariables.set('graphql_message_id', response.data.messages[0].id);",
									"        }",
									"    } else if (response.errors) {",
									"        console.log('❌ GraphQL Errors:', response.errors);",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "x-api-key",
								"value": "{{appsync_api_key}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"query\": \"query GetMessages($roomId: ID!, $after: AWSTimestamp, $limit: Int) {\\n        messages(roomId: $roomId, after: $after, limit: $limit) {\\n            id\\n            roomId\\n            senderId\\n            text\\n            ts\\n        }\\n    }\",\n    \"variables\": {\n        \"roomId\": \"{{sample_room_id}}\",\n        \"limit\": 20\n    }\n}"
						},
						"url": {
							"raw": "{{appsync_endpoint}}",
							"host": [
								"{{appsync_endpoint}}"
							]
						},
						"description": "Get messages using GraphQL query"
					},
					"response": []
				},
				{
					"name": "Send Message (GraphQL)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    if (response.data && response.data.sendMessage) {",
									"        pm.collectionVariables.set('graphql_sent_message_id', response.data.sendMessage.id);",
									"        console.log('✅ GraphQL Message sent:', response.data.sendMessage.id);",
									"    } else if (response.errors) {",
									"        console.log('❌ GraphQL Errors:', response.errors);",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "x-api-key",
								"value": "{{appsync_api_key}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"query\": \"mutation SendMessage($roomId: ID!, $text: String!) {\\n        sendMessage(roomId: $roomId, text: $text) {\\n            id\\n            roomId\\n            senderId\\n            text\\n            ts\\n        }\\n    }\",\n    \"variables\": {\n        \"roomId\": \"{{sample_room_id}}\",\n        \"text\": \"Hello from GraphQL! This is a test message sent via AppSync at {{$timestamp}}\"\n    }\n}"
						},
						"url": {
							"raw": "{{appsync_endpoint}}",
							"host": [
								"{{appsync_endpoint}}"
							]
						},
						"description": "Send message using GraphQL mutation"
					},
					"response": []
				},
				{
					"name": "Send Multiple Messages (GraphQL)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate random GraphQL test messages",
									"const messages = [",
									"    '🚀 GraphQL message #1 - Real-time messaging!',",
									"    '📡 GraphQL message #2 - AppSync is awesome!',",
									"    '⚡ GraphQL message #3 - Subscriptions working!',",
									"    '🎯 GraphQL message #4 - GoalsGuild messaging!',",
									"    '🔥 GraphQL message #5 - {{$timestamp}}'",
									"];",
									"",
									"const randomMessage = messages[Math.floor(Math.random() * messages.length)];",
									"pm.collectionVariables.set('random_graphql_message', randomMessage);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    if (response.data && response.data.sendMessage) {",
									"        console.log('✅ Random GraphQL message sent:', pm.collectionVariables.get('random_graphql_message'));",
									"    } else if (response.errors) {",
									"        console.log('❌ GraphQL Errors:', response.errors);",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "x-api-key",
								"value": "{{appsync_api_key}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"query\": \"mutation SendMessage($roomId: ID!, $text: String!) {\\n        sendMessage(roomId: $roomId, text: $text) {\\n            id\\n            roomId\\n            senderId\\n            text\\n            ts\\n        }\\n    }\",\n    \"variables\": {\n        \"roomId\": \"{{sample_room_id}}\",\n        \"text\": \"{{random_graphql_message}}\"\n    }\n}"
						},
						"url": {
							"raw": "{{appsync_endpoint}}",
							"host": [
								"{{appsync_endpoint}}"
							]
						},
						"description": "Send random test message using GraphQL"
					},
					"response": []
				},
				{
					"name": "GraphQL Introspection",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    if (response.data && response.data.__schema) {",
									"        console.log('✅ GraphQL Schema introspection successful');",
									"        console.log('Available types:', response.data.__schema.types.length);",
									"    } else if (response.errors) {",
									"        console.log('❌ GraphQL Errors:', response.errors);",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-api-key",
								"value": "{{appsync_api_key}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"query\": \"query IntrospectionQuery {\\n        __schema {\\n            types {\\n                name\\n                kind\\n                description\\n                fields {\\n                    name\\n                    type {\\n                        name\\n                        kind\\n                    }\\n                }\\n            }\\n        }\\n    }\"\n}"
						},
						"url": {
							"raw": "{{appsync_endpoint}}",
							"host": [
								"{{appsync_endpoint}}"
							]
						},
						"description": "Introspect GraphQL schema to see available operations"
					},
					"response": []
				},
				{
					"name": "Test GraphQL Authentication",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    if (response.data && response.data.me) {",
									"        console.log('✅ GraphQL Authentication successful');",
									"        console.log('User:', response.data.me.email);",
									"    } else if (response.errors) {",
									"        console.log('❌ GraphQL Authentication failed:', response.errors);",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "x-api-key",
								"value": "{{appsync_api_key}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"query\": \"query Me {\\n        me {\\n            id\\n            email\\n            fullName\\n            nickname\\n            role\\n            tier\\n        }\\n    }\"\n}"
						},
						"url": {
							"raw": "{{appsync_endpoint}}",
							"host": [
								"{{appsync_endpoint}}"
							]
						},
						"description": "Test GraphQL authentication by querying user profile"
					},
					"response": []
				}
			],
			"description": "AppSync GraphQL endpoints for messaging operations"
		},
		{
			"name": "Health & Status",
			"item": [
				{
					"name": "API Health Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    console.log('✅ API Gateway is healthy');",
									"} else {",
									"    console.log('❌ API Gateway health check failed');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "OPTIONS",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{api_gateway_key}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/messaging/rooms",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"messaging",
								"rooms"
							]
						},
						"description": "Check if API Gateway is responding"
					},
					"response": []
				},
				{
					"name": "Token Validation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    console.log('✅ Token is valid');",
									"} else if (pm.response.code === 401) {",
									"    console.log('❌ Token is invalid or expired');",
									"    console.log('Please run the Login request to get a new token');",
									"} else {",
									"    console.log('❌ Unexpected response:', pm.response.code);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "x-api-key",
								"value": "{{api_gateway_key}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/messaging/rooms",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"messaging",
								"rooms"
							]
						},
						"description": "Validate if the current token is still valid"
					},
					"response": []
				}
			],
			"description": "Health check and status endpoints"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global pre-request script",
					"console.log('🚀 Starting GoalsGuild API request...');",
					"",
					"// Check if required variables are set",
					"if (!pm.collectionVariables.get('base_url')) {",
					"    console.log('⚠️  Warning: base_url not set. Using default API Gateway URL.');",
					"    pm.collectionVariables.set('base_url', 'https://3xlvsffmxc.execute-api.us-east-2.amazonaws.com/v1');",
					"}",
					"",
					"if (!pm.collectionVariables.get('api_gateway_key')) {",
					"    console.log('⚠️  Warning: api_gateway_key not set. Some requests may fail.');",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global test script",
					"console.log('📊 Response Status:', pm.response.code);",
					"console.log('⏱️  Response Time:', pm.response.responseTime + 'ms');",
					"",
					"// Log response for debugging",
					"if (pm.response.code >= 400) {",
					"    console.log('❌ Error Response:', pm.response.text());",
					"}"
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "https://3xlvsffmxc.execute-api.us-east-2.amazonaws.com/v1",
			"type": "string",
			"description": "Base URL for GoalsGuild API Gateway"
		},
		{
			"key": "api_gateway_key",
			"value": "",
			"type": "string",
			"description": "API Gateway key (if required)"
		},
		{
			"key": "test_email",
			"value": "test@goalsguild.com",
			"type": "string",
			"description": "Test user email for authentication"
		},
		{
			"key": "test_password",
			"value": "TestPassword123!",
			"type": "string",
			"description": "Test user password"
		},
		{
			"key": "test_username",
			"value": "testuser",
			"type": "string",
			"description": "Test username"
		},
		{
			"key": "access_token",
			"value": "",
			"type": "string",
			"description": "JWT access token (automatically set after login)"
		},
		{
			"key": "user_id",
			"value": "",
			"type": "string",
			"description": "User ID (automatically set after login)"
		},
		{
			"key": "sample_room_id",
			"value": "",
			"type": "string",
			"description": "Sample room ID for testing"
		},
		{
			"key": "created_room_id",
			"value": "",
			"type": "string",
			"description": "ID of room created during testing"
		},
		{
			"key": "sample_message_id",
			"value": "",
			"type": "string",
			"description": "Sample message ID for testing"
		},
		{
			"key": "sent_message_id",
			"value": "",
			"type": "string",
			"description": "ID of message sent during testing"
		},
		{
			"key": "random_message",
			"value": "",
			"type": "string",
			"description": "Random message for testing"
		},
		{
			"key": "appsync_endpoint",
			"value": "https://f7qjx3q3nfezdnix3wuyxtrnre.appsync-api.us-east-2.amazonaws.com/graphql",
			"type": "string",
			"description": "AppSync GraphQL endpoint URL"
		},
		{
			"key": "appsync_api_key",
			"value": "da2-vey6tzb3ynadbbcqnceaktdt4q",
			"type": "string",
			"description": "AppSync API key for authentication"
		},
		{
			"key": "graphql_message_id",
			"value": "",
			"type": "string",
			"description": "GraphQL message ID for testing"
		},
		{
			"key": "graphql_sent_message_id",
			"value": "",
			"type": "string",
			"description": "ID of message sent via GraphQL"
		},
		{
			"key": "random_graphql_message",
			"value": "",
			"type": "string",
			"description": "Random GraphQL message for testing"
		}
	]
}
